{"version":3,"sources":["constants/api_endpoints.js","App.js","serviceWorker.js","index.js"],"names":["lang","languages","concat","process","world","Option","Select","wrapperStyles","width","maxWidth","margin","fontFamily","display","justifyContent","flexDirection","App","_useState","useState","_useState2","Object","slicedToArray","selectedLanguages","setSelectedLanguages","_useState3","_useState4","selectedCountries","setSelectedCountries","_useState5","_useState6","loading","setLoading","_useState7","_useState8","setLanguages","_useState9","_useState10","setWorld","_fetchLanguages","asyncToGenerator","regenerator_default","a","mark","_callee2","_ref3","data","wrap","_context2","prev","next","axios","get","api_endpoints","sent","stop","apply","this","arguments","_fetchWorld","_callee3","_ref4","_context3","useEffect","fetchLanguages","fetchWorld","setTimeout","ReactTooltip","rebuild","columns","title","dataIndex","key","render","link","react_default","createElement","src","style","langs","map","language","i","tag","color","includes","name","textAlign","es_select","mode","placeholder","marginRight","onChange","value","filterOption","input","option","props","children","toLowerCase","indexOf","es_button","type","onClick","promises","forEach","promise","Promise","_ref","_callee","resolve","reject","_ref2","countries","_context","country","push","t0","_x","_x2","all","then","values","flat","height","alignItems","spin","size","lib","disablePanning","geography","geographies","projection","data-tip","properties","default","fill","c","id","stroke","strokeWidth","outline","hover","pressed","length","marginTop","padding","table","dataSource","dist_default","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dce71e49.chunk.js","sourcesContent":["export const name = \"https://restcountries.eu/rest/v2/name\";\r\nexport const lang = \"https://restcountries.eu/rest/v2/lang\";\r\nexport const languages = `${process.env.PUBLIC_URL}/data/language_codes.json`;\r\nexport const world = `${process.env.PUBLIC_URL}/data/world-50m.json`;","\nimport React, { useState, useEffect } from \"react\";\nimport {\n  ComposableMap,\n  ZoomableGroup,\n  Geographies,\n  Geography,\n} from \"react-simple-maps\";\nimport {\n  Select,\n  Button,\n  Spin,\n  Table,\n  Divider,\n  Tag\n} from 'antd';\nimport ReactTooltip from 'react-tooltip';\nimport axios from 'axios';\nimport * as api_endpoints from './constants/api_endpoints';\n\nconst { Option } = Select;\n\nconst wrapperStyles = {\n  width: \"100%\",\n  maxWidth: 1280,\n  margin: \"0 auto\",\n  fontFamily: \"Roboto, sans-serif\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  flexDirection: \"column\",\n}\n\nfunction App() {\n  const [selectedLanguages, setSelectedLanguages] = useState([]);\n  const [selectedCountries, setSelectedCountries] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [languages, setLanguages] = useState([]);\n  const [world, setWorld] = useState([]);\n\n  useEffect(() => {\n    fetchLanguages();\n    fetchWorld();\n  }, [])\n\n  useEffect(() => {\n    setTimeout(() => {\n      ReactTooltip.rebuild()\n    }, 100)\n  }, [selectedCountries])\n\n  async function fetchLanguages() {\n    const { data } = await axios.get(api_endpoints.languages);\n    setLanguages(data);\n  }\n\n  async function fetchWorld() {\n    const { data } = await axios.get(api_endpoints.world);\n    setWorld(data);\n  }\n\n  function handleLangChange(value) {\n    setSelectedLanguages(value);\n  }\n\n  function handleSearch() {\n    if (selectedLanguages) {\n      const promises = [];\n      selectedLanguages.forEach(lang => {\n        const promise = new Promise(async (resolve, reject) => {\n          try {\n            setLoading(true)\n            const { data } = await axios.get(`${api_endpoints.lang}/${lang}`);\n            const countries = []\n            data.forEach(country => {\n              countries.push(country);\n            });\n            resolve(countries);\n          }\n          catch (e) {\n            resolve();\n            throw e;\n          }\n        });\n        promises.push(promise);\n      });\n\n      Promise.all(promises).then(values => {\n        setSelectedCountries(values.flat())\n        setLoading(false);\n      })\n    }\n  }\n\n  const columns = [\n    {\n      title: 'Flag',\n      dataIndex: 'flag',\n      key: 'flag',\n      render: link => <img src={link} style={{ width: 20 }} />,\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Languages',\n      key: 'languages',\n      dataIndex: 'languages',\n      render: langs => (\n        <span>\n          {langs.map((language, i) =>\n              <Tag color={selectedLanguages.includes(language['iso639_1']) ? 'green' : ''} key={`lang${i}`}>\n                {language.name}\n              </Tag>\n          )}\n        </span>\n      ),\n    }\n  ];\n\n  return (\n    <div style={wrapperStyles}>\n      <div style={{ textAlign: \"center\", margin: \"25px 15px\" }}>\n        <Select\n          mode=\"multiple\"\n          placeholder=\"Choose any language\"\n          style={{ width: 400, marginRight: 15 }}\n          onChange={handleLangChange}\n          filterOption={(input, option) =>\n            option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n          }\n        >\n          {languages.map((lang, i) =>\n            <Option value={lang[\"alpha2\"]} key={`${lang[\"alpha2\"]}-${i}`}>{lang[\"English\"]}</Option>\n          )}\n        </Select>\n        <Button type=\"primary\" onClick={handleSearch}>Go</Button>\n      </div>\n\n      {loading ? <div style={{ height: 450, display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}><Spin size=\"large\" /></div>\n        : <div style={{ textAlign: \"center\" }}>\n          <ComposableMap>\n            <ZoomableGroup disablePanning>\n              <Geographies geography={world}>\n                {(geographies, projection) =>\n                  geographies.map((geography, i) => {\n                    return (\n                      <Geography\n                        key={i}\n                        geography={geography}\n                        projection={projection}\n                        data-tip={geography.properties.name}\n                        style={{\n                          default: {\n                            fill: selectedCountries.map(c => c[\"alpha3Code\"]).includes(geography.id) ? \"#00c42a\" : \"#ECEFF1\",\n                            stroke: \"#607D8B\",\n                            strokeWidth: 0.75,\n                            outline: \"none\",\n                          },\n                          hover: {\n                            fill: selectedCountries.map(c => c[\"alpha3Code\"]).includes(geography.id) ? \"#00c42a\" : \"#ECEFF1\",\n                            stroke: \"#607D8B\",\n                            strokeWidth: 0.75,\n                            outline: \"none\",\n                          },\n                          pressed: {\n                            fill: selectedCountries.map(c => c[\"alpha3Code\"]).includes(geography.id) ? \"#00c42a\" : \"#ECEFF1\",\n                            stroke: \"#607D8B\",\n                            strokeWidth: 0.75,\n                            outline: \"none\",\n                          },\n                        }}\n                      />\n                    )\n                  })\n                }\n              </Geographies>\n            </ZoomableGroup>\n          </ComposableMap>\n        </div>\n      }\n      {selectedCountries.length &&\n        <div style={{ marginTop: 25, padding: 25 }}>\n          <Table columns={columns} dataSource={selectedCountries} />\n        </div>\n      }\n      <ReactTooltip />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}